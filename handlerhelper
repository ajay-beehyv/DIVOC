diff --git a/backend/certificate_api/configs/constants.js b/backend/certificate_api/configs/constants.js
index 13ea4ddd..c6b91a21 100644
--- a/backend/certificate_api/configs/constants.js
+++ b/backend/certificate_api/configs/constants.js
@@ -1,7 +1,8 @@
 const EU_DISEASE = {"covid-19": "840539006"};
 const TEMPLATES = {
   VACCINATION_CERTIFICATE: "vaccineCertificateTemplate",
-  TEST_CERTIFICATE: "testCertificateTemplate"
+  TEST_CERTIFICATE: "testCertificateTemplate",
+  ADD_HELPER: "AddHandlerHelper"
 };
 Object.freeze(TEMPLATES);
 
diff --git a/backend/certificate_api/src/routes/certificate_controller.js b/backend/certificate_api/src/routes/certificate_controller.js
index bb161e9c..9d58108b 100644
--- a/backend/certificate_api/src/routes/certificate_controller.js
+++ b/backend/certificate_api/src/routes/certificate_controller.js
@@ -191,6 +191,7 @@ async function createCertificatePDF(certificateResp, res, source) {
         } catch(err) {
             res.statusCode = 500;
             res.setHeader("Content-Type", "application/json");
+            console.error(err);
             let error = {
                 date: new Date(),
                 source: "GetVaccinePDFCertificate",
@@ -737,6 +738,9 @@ async function certificateAsSHCPayload(req, res) {
 
 async function createPDF(htmlData, data) {
     const template = Handlebars.compile(htmlData);
+    let helpers = Handlebars.compile(await configurationService.AddHelpers(TEMPLATES.ADD_HELPER))().toString();
+    eval(helpers);
+    
     let certificate = template(data);
     const browser = await puppeteer.launch({
         headless: true,
diff --git a/backend/certificate_api/src/services/configuration_service.js b/backend/certificate_api/src/services/configuration_service.js
index 4d317231..a5e90090 100644
--- a/backend/certificate_api/src/services/configuration_service.js
+++ b/backend/certificate_api/src/services/configuration_service.js
@@ -1,17 +1,18 @@
 const {Etcd3} = require('etcd3');
 const sanitizeHtml = require('sanitize-html');
-
+const Handlebars = require('handlebars');
 const config = require('../../configs/config');
 const {TEMPLATES, EU_VACCINE_CONFIG_KEYS} = require('../../configs/constants');
 let etcdClient;
 let configuration;
 let vaccineCertificateTemplate = null, testCertificateTemplate = null;
 let EU_VACCINE_PROPH = null, EU_VACCINE_CODE = null, EU_VACCINE_MANUF = null;
-
+let AddHandlerHelper = null;
 function init() {
   etcdClient = new Etcd3({hosts: config.ETCD_URL});
   setUpWatcher(TEMPLATES.VACCINATION_CERTIFICATE, );
   setUpWatcher(TEMPLATES.TEST_CERTIFICATE);
+  setUpWatcher(TEMPLATES.ADD_HELPER);
   setUpWatcher(EU_VACCINE_CONFIG_KEYS.VACCINE_CODE);
   setUpWatcher(EU_VACCINE_CONFIG_KEYS.MANUFACTURER);
   setUpWatcher(EU_VACCINE_CONFIG_KEYS.PROPHYLAXIS_TYPE);
@@ -47,6 +48,9 @@ function updateConfigValues(key, value) {
     case TEMPLATES.TEST_CERTIFICATE:
       testCertificateTemplate = value;
       break;
+    case TEMPLATES.ADD_HELPER:
+      AddHandlerHelper = value;
+      break;
     case EU_VACCINE_CONFIG_KEYS.VACCINE_CODE:
       EU_VACCINE_CODE = value;
       break;
@@ -89,6 +93,9 @@ async function loadConfigurationValues(key, fetchConfigCallbackFunc) {
     case TEMPLATES.TEST_CERTIFICATE:
       value = testCertificateTemplate;
       break;
+    case TEMPLATES.ADD_HELPER:
+      value = AddHandlerHelper;
+      break;
     case EU_VACCINE_CONFIG_KEYS.MANUFACTURER:
       value = EU_VACCINE_MANUF;
       break;
@@ -115,12 +122,17 @@ class ConfigurationService {
     updateConfigValues(key, certificateTemplate);
     return certificateTemplate;
   }
-
+  async AddHelpers(key){
+    let helper= await loadConfigurationValues(key, async() => await configuration.AddHelpers(key));
+    updateConfigValues(key,helper);
+    return helper;
+  }
   async getEUVaccineDetails(key) {
     let details = await loadConfigurationValues(key, async() => await configuration.getEUVaccineDetails(key));
     updateConfigValues(key, details);
     return JSON.parse(details);
   }
+  
 }
 
 const etcd = function() {
@@ -128,6 +140,10 @@ const etcd = function() {
     const template = (await etcdClient.get(templateKey).string());
     return template;
   }
+  this.AddHelpers = async function(key){
+    const value = (await etcdClient.get(key).string());
+    return value;
+  }
 
   this.getEUVaccineDetails = async function(key) {
     const value = (await etcdClient.get(key).string());
diff --git a/certificate_apiBuild.sh b/certificate_apiBuild.sh
new file mode 100755
index 00000000..56f4acab
--- /dev/null
+++ b/certificate_apiBuild.sh
@@ -0,0 +1,5 @@
+cd backend/certificate_api
+make docker
+cd ../..
+docker-compose up -d --force-recreate --no-deps certificate-api
+docker-compose ps
\ No newline at end of file
diff --git a/templates/templates/HandlerHelpers.js b/templates/templates/HandlerHelpers.js
new file mode 100644
index 00000000..e96add86
--- /dev/null
+++ b/templates/templates/HandlerHelpers.js
@@ -0,0 +1,10 @@
+Handlebars.registerHelper("loud", function (aString) { return aString.toUpperCase() });
+Handlebars.registerHelper("small", function (aString) { return aString.toLowerCase() });
+Handlebars.registerHelper("mergeNicPassport", function(nic,passportNo){
+    let nicandpassport ="NIC: "+nic;
+        if(passportNo!==""){
+         nicandpassport +=" / Passport: "+passportNo;
+        }
+    return nicandpassport;
+});
+
diff --git a/templates/templates/updateConfigInETCD.sh b/templates/templates/updateConfigInETCD.sh
new file mode 100755
index 00000000..cd911c7e
--- /dev/null
+++ b/templates/templates/updateConfigInETCD.sh
@@ -0,0 +1,65 @@
+testKey="testCertificateTemplate"
+testEncodedKey=`echo -n $testKey | base64`
+testValue=`cat testCertificateTemplate.html`
+testEncodedVal=`echo $testValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$testEncodedKey\", \"value\": \"$testEncodedVal\"}"
+
+vaccineKey="vaccineCertificateTemplate"
+vaccineEncodedKey=`echo -n $vaccineKey | base64`
+vaccineValue=`cat vaccineCertificateTemplate.html`
+vaccineEncodedVal=`echo -n $vaccineValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$vaccineEncodedKey\", \"value\": \"$vaccineEncodedVal\"}"
+
+icdKey="ICD"
+icdEncodedKey=`echo -n $icdKey | base64`
+icdValue=`cat ICD.json`
+encodedIcdValue=`echo $icdValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$icdEncodedKey\", \"value\": \"$encodedIcdValue\"}"
+
+vaccineIcdKey="VACCINE_ICD"
+vaccineIcdEncodedKey=`echo -n $vaccineIcdKey | base64`
+vaccineIcdValue=`cat VACCINE_ICD.json`
+encodedVaccineIcdValue=`echo $vaccineIcdValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$vaccineIcdEncodedKey\", \"value\": \"$encodedVaccineIcdValue\"}"
+
+prophKey="euVaccineProph"
+encodedProphKey=`echo -n $prophKey | base64`
+prophValue=`cat PROPH.json`
+encodedProphValue=`echo -n $prophValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedProphKey\", \"value\": \"$encodedProphValue\"}"
+
+codeKey="euVaccineCode"
+encodedCodeKey=`echo -n $codeKey | base64`
+codeValue=`cat CODE.json`
+encodedCodeValue=`echo -n $codeValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedCodeKey\", \"value\": \"$encodedCodeValue\"}"
+
+manufKey="euVaccineManuf"
+encodedManufKey=`echo -n $manufKey | base64`
+manufValue=`cat MANUF.json`
+encodedManufValue=`echo -n $manufValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedManufKey\", \"value\": \"$encodedManufValue\"}"
+
+fieldsKeyPathMappingKey="fieldsKeyPath"
+encodedFieldsKeyPathMappingKey=`echo -n $fieldsKeyPathMappingKey | base64`
+fieldsKeyPathMappingValue=`cat OPTIONAL_FIELDS_KEY_PATH.json`
+encodedFieldsKeyPathMappingValue=`echo -n $fieldsKeyPathMappingValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedFieldsKeyPathMappingKey\", \"value\": \"$encodedFieldsKeyPathMappingValue\"}"
+
+ddccTemplateKey="DDCC_TEMPLATE"
+encodedDdccTemplateKey=`echo -n $ddccTemplateKey | base64`
+ddccTemplateValue=`cat ddcc_w3c_certificate_payload.template`
+encodedDdccTemplateValue=`echo -n $ddccTemplateValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedDdccTemplateKey\", \"value\": \"$encodedDdccTemplateValue\"}"
+
+w3cTemplateKey="W3C_TEMPLATE"
+encodedW3cTemplateKey=`echo -n $w3cTemplateKey | base64`
+w3cTemplateValue=`cat w3c_certificate_payload.template`
+encodedW3cTemplateValue=`echo -n $w3cTemplateValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedW3cTemplateKey\", \"value\": \"$encodedW3cTemplateValue\"}"
+
+helperKey="AddHandlerHelper"
+encodedHelperKey=`echo -n $helperKey | base64`
+helperValue=`cat HandlerHelpers.js`
+encodedHelperValue=`echo -n $helperValue | base64 -w 0`
+curl -L http://localhost:2379/v3/kv/put -X POST -d "{\"key\": \"$encodedHelperKey\", \"value\": \"$encodedHelperValue\"}"
\ No newline at end of file
